---
title: "Figures"
format: html
editor: source
author: viv3kanand
---

## Install packages

```{r}
#| label: install
#| echo: true
#| eval: false
options(renv.config.pak.enabled = TRUE)

renv::install("ggpointdensity")
renv::install("paletteer")

```


## Load libraries

```{r}
#| label: packages
#| echo: true
#| eval: true
#| message: false
#| warning: false

require(Seurat)
require(DropletUtils)
require(tidyverse)
require(ggpointdensity)
# require(scico)

```

### Load data

```{r}
#| label: load data
#| echo: false
#| eval: true

seu_PBMC <- read_rds("../data/2024-11-22_seurat_obj_PBMC.rds")

DefaultAssay(seu_PBMC) <- "RNA"
Idents(seu_PBMC) <- "cell_type"

seu_WB <- read_rds("../data/2024-10-17_seurat_obj_WB.rds")

DefaultAssay(seu_WB) <- "RNA"
Idents(seu_WB) <- "cell_type"
seu_WB <- JoinLayers(seu_WB)


# TF analysis

acts_TF_PBMC <- read_rds("../data/temp/acts_TF_PBMC.rds")

seu_PBMC[['tfsulm']] <- acts_TF_PBMC |> 
  tidyr::pivot_wider(id_cols = 'source', 
                     names_from = 'condition',
                     values_from = 'score') |> 
  tibble::column_to_rownames('source') |> 
  Seurat::CreateAssayObject()

DefaultAssay(seu_PBMC) <- "tfsulm"

seu_PBMC <- Seurat::ScaleData(seu_PBMC)
seu_PBMC@assays$tfsulm@data <- seu_PBMC@assays$tfsulm@scale.data

# Aggregate expression data
cd14_PBMC <- subset(seu_PBMC, idents = "CD14 Mono")
Idents(cd14_PBMC) <- "Condition"
avg.cd14.mono <- log1p(AverageExpression(cd14_PBMC, verbose = FALSE)$RNA) |> as.data.frame()
avg.cd14.mono$gene <- rownames(avg.cd14.mono)

write_rds(avg.cd14.mono, "RData/avg.cd14.mono.rds")
```

## Load data

```{r}
#| label: load data
#| echo: true
#| eval: false

seu_WB <- read_rds(paste0("RData/", Sys.Date(), "_seurat_WB.rds"))
seu_PBMC <- read_rds(paste0("RData/", Sys.Date(), "_seurat_PBMC.rds"))

DefaultAssay(seu_WB) <- "RNA"
Idents(seu_WB) <- "cell_type"

DefaultAssay(seu_PBMC) <- "RNA"
Idents(seu_PBMC) <- "cell_type"

```

## Helper scripts

```{r}
#| label: source helper scripts
#| echo: true
#| eval: true

source("../scripts/helper_scripts.R")

```

### Custom theme to apply

```{r}
# Theme elements
font <- "Helvetica"
text_size <- 10
line_size <- 0.5

# Figure elements
res <- 300
full_width <- 10
full_height <- 13
meas_units <- "in"
output_filetype <- "png"
fig_lab_size <- 9
fig_lab_pos_x <- 0
fig_lab_pos_y <- 1
label_type <- "AUTO"

custom_theme <- function(){
  theme_classic() +
    theme(text = element_text(family = font,
                              size = text_size),
          line = element_line(linewidth = line_size),
          legend.title = element_text(size = rel(1.5)),
          
          axis.title = element_text(size = rel(1.5)),
          axis.text = element_text(size = rel(1.15)),
          plot.title = element_text(size = rel(1.5),
                                    hjust = 0.5),
          panel.grid = element_blank(),
          plot.background = element_rect(fill = "white"),
          legend.position = "right",
          legend.text=element_text(size = text_size))
}

empty_axis <- function(){
  theme(axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())
}


umap_col <- paletteer::paletteer_d("ggthemes::Tableau_20")

palette1 <- c("#E64B35FF", "#417839FF")
palette2 <- c("#FF3D7FFF", "#3FB8AFFF")
palette3 <- c("#3A488AFF", "#BE3428FF") # paletteer_d("lisa::OskarSchlemmer")
palette4 <- c("#CF597EFF", "#009392FF") # paletteer_d("rcartocolor::Temps")
palette5 <- c("#CF597EFF", "#E9E29CFF", "#009392FF")

palette6 <- c("#9E0142", "#D53E4F", "#F46D43", "#FDAE61", "#FEE08B", "#FFFFBF", "#E6F598", "#ABDDA4", "#66C2A5", "#3288BD", "#5E4FA2", "#D53E4F", "#004E64", "#DBB957", "#8FA6CB", "#66C2A5")

palette7 <- RColorBrewer::brewer.pal(11,'Spectral')

```

## QC

### Library saturation

```{r}
#| label: saturation
#| echo: true
#| eval: true
#| fig-width: 10
#| fig-height: 7
#| fig-align: center

ggplot(seurat_list$C2_Control@meta.data, aes(nCount_RNA, nFeature_RNA)) +
    geom_bin2d(bins = 50) +
    scico:: scale_fill_scico(palette = "davos", direction = -1) +
    scale_x_log10(guide = "axis_logticks") + scale_y_log10(guide = "axis_logticks") +
    labs(x = "Total UMI counts", y = "Number of genes detected")

```

### Knee plot

```{r}
#| label: knee plot
#| echo: true
#| eval: true
#| fig-width: 10
#| fig-height: 7
#| fig-align: center

knee_plot(barcodeRanks(seurat_list$C2_Control[["RNA"]]$counts, lower = 10))

```


```{r}
ggplot(seurat_obj@meta.data, aes(nCount_RNA, percent.mt)) +
  geom_pointdensity() +
  scale_color_scico(palette = "devon", direction = -1, end = 0.9) +
  labs(x = "Total UMI counts", y = "Percentage mitochondrial")

```


```{r}
p1 <- seurat_obj@meta.data |> 
    ggplot(aes(color = Condition, x = nFeature_RNA  , fill = Condition)) + 
    geom_density(alpha = 0.2) + 
    scale_x_log10() + 
    theme_classic() +
    ylab("Density") +
    geom_vline(xintercept = 500)

p2 <- seurat_obj@meta.data |> 
    ggplot(aes(color = Condition, x = nCount_RNA , fill = Condition)) + 
    geom_density(alpha = 0.2) + 
    scale_x_log10() + 
    theme_classic() +
    ylab("Density") +
    geom_vline(xintercept = 500)

p3 <- seurat_obj@meta.data |> 
    ggplot(aes(color = Condition, x = percent.mt, fill = Condition)) + 
    geom_density(alpha = 0.2) + 
    #scale_x_log10() + 
    theme_classic() +
    geom_vline(xintercept = c(5, 10))

p4 <- FeatureScatter(seurat_obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") & NoLegend()

p1 + p2 + p3 + p4
```

<!-- Todo list -->

<!-- Panel 1: Bulk RNAseq: PCA plot, Volcano plot, GO/KEGG plot, Heatmap of immune system/neutrophil related genes -->

```{r}
# Volcano plot
dge_bulk <- read_csv("../data/Bulk/DEseq2-gene-batch-corrected-14Nov22.csv")

dge_bulk |> 
  mutate(
    Expression = case_when(
      log2FoldChange >= 1 & padj <= 0.05 ~ "Upregulated",
      log2FoldChange <= -1 & padj <= 0.05 ~ "Downregulated",
      TRUE ~ "Not significant")) |>
  ggplot(aes(x = log2FoldChange, y = -log10(padj))) +
  geom_point(aes(color = Expression)) +
  ggrepel::geom_text_repel(data = head(dge_bulk[order(dge_bulk[["padj"]]),], 10),
                           aes(label = Gene)) +
  scale_color_manual(values = c("#D53E4F", "grey", "#3288BD")) +
  scale_x_continuous(name = "Log2 Fold Change") +
  scale_y_continuous(name = "-Log10 padj") +
  geom_hline(yintercept = -log10(0.05), linetype = 2, color = "black") +
  geom_vline(xintercept = c(-1, 1), linetype = 2, color = "black") +
  custom_theme()



# GO/KEGG plot

ego_bulk <- read_rds("RData/ego_bulk.rds")

go_list <- c("cytokine-mediated signaling pathway", "response to lipopolysaccharide", "response to molecule of bacterial origin", "response to chemokine", "chemokine-mediated signaling pathway", "neutrophil migration", "cell chemotaxis", "myeloid leukocyte migration", "extracellular matrix organization", "neutrophil chemotaxis", "leukocyte mediated immunity", "cellular response to interleukin-1", "regulation of leukocyte activation", "neutrophil mediated cytotoxicity", "monocyte chemotaxis", "neutrophil mediated immunity", "regulation of interleukin-8 production", "type II interferon production", "regulation of neuroinflammatory response", "activation of immune response", "regulation of inflammatory response", "regulation of innate immune response", "regulation of nervous system development")

ego_bulk@result |> 
    filter(Description %in% go_list) |> 
    dplyr::select(c(1:10,13)) |> 
    mutate(GeneRatio = eval(parse(text = GeneRatio)),
           order = GeneRatio, .by = Description) |> 
    ggplot(aes(x = GeneRatio, y = reorder(Description, order),color = -log10(p.adjust), size = Count)) +
    geom_point() + 
    labs(x = "Gene Ratio", y = "Gene Ontology") + 
    scale_color_gradientn(colours = c('#FFFFFF', '#3288BD'), limit = c(0,8), na.value = "grey") +
    scale_y_discrete(labels = function(x) stringr::str_to_sentence(x)) +
    custom_theme()
```


<!-- Panel 2: WGCNA- bulk, IPA module 3: Tom plot, heatmap, Module eigenvector plot with significance, Module 3 IPA Top 20 pathway plot  -->
<!-- Panel 3: scRNAseq- PBMC (WB data in supplementary)- UMAPs, marker dot plot, DCAT proportions, DEG-upset plot (all cell types) -->

```{r}
DefaultAssay(seu_WB) <- "RNA"
Idents(seu_WB) <- "cell_type"

DefaultAssay(seu_PBMC) <- "RNA"
Idents(seu_PBMC) <- "cell_type"


# Whole blood (Supplementary)

S1A <- DimPlot(seu_WB, 
               reduction = "umap.harmony", 
               group.by = c("cell_type"), 
               pt.size = 1, 
               label = TRUE, 
               label.size = 5,
               cols = umap_col) & 
  labs(title = NULL, x = "UMAP1", y = "UMAP2") &
  NoLegend() &
  custom_theme() +
  empty_axis() +
  NoLegend()


markers_WB <- c("MKI67", "TOP2A", "CLEC4C", "NRP1", "FCER1A", "CLEC10A", "LYZ", "PPBP", "FCGR3A", "TNFRSF13B", "JCHAIN", "CD14", "KLRB1", "CD8A", "CD8B", "NKG7", "GNLY", "NCAM1", "CD79A", "MS4A1", "CD4", "CCR7", "ALPL", "MME")

S1B <- DotPlot(seu_WB, features = markers_WB) + 
  scale_colour_gradient2(low = "#3288BD", mid = 'white', high = "#D53E4F") +
  RotatedAxis() +
  custom_theme() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

# Figure 3A - UMAP - PBMC

P3A <- DimPlot(seu_PBMC, 
               reduction = "umap.harmony", 
               group.by = c("cell_type"), 
               pt.size = 0.5,
               label = TRUE, 
               label.size = 5,
               raster = FALSE,
               cols = umap_col) & 
  labs(title = NULL, x = "UMAP1", y = "UMAP2") &
  NoLegend() &
  custom_theme() +
  empty_axis()
  

# Figure 3B - Marker genes - Dot plot

markers_PBMC <- c("CD34", "TNFRSF17", "LEF1", "MKI67", "TOP2A", "CLEC4C", "NRP1", "KLRB1", "PTGDS", "FCER1A", "CLEC10A", "TNFRSF13B", "TRDC", "FCGR3A", "MS4A7", "PPBP", "CD8A", "CD79A", "MS4A1", "CCR7", "CCR4", "NKG7", "GNLY", "NCAM1", "CD14", "LYZ")

P3B <- DotPlot(seu_PBMC, features = markers_PBMC) + 
  scale_colour_gradient2(low = "#3288BD", mid = 'white', high = "#D53E4F") +
  RotatedAxis() +
  custom_theme() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))

# Figure 3C - Cell proportion

dcats_df <- run_dcats(seu_PBMC)

P3C <- seu_PBMC@meta.data |> 
  count(cell_type, Condition) |> 
  mutate(dcats = rep(dcats_df$LRT_pvals, each = 2)) |> 
  group_by(cell_type) |> 
  mutate(prop = n / sum(n),
         stars = case_when(
           dcats < 0.001 ~ "***",
           dcats < 0.01 ~ "**",
           dcats < 0.05 ~ "*",
           TRUE ~ "")) |> 
  ggplot(aes(x = cell_type, y = prop * 100, fill = Condition)) +
  geom_col(position = position_dodge()) +
  geom_text(aes(cell_type, label = round(100 * prop)),
            position = position_dodge(.9), vjust = -.2) +
  geom_text(aes(label = stars), 
            position = position_dodge(.9), vjust = -1.5) +
  scale_fill_manual(values = c("#3288BD", "#D53E4F")) +
  labs(x = "Cell type", y = "Relative abundance (%)") +
  custom_theme() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        legend.text = element_text(size=rel(1.15)))

# Figure 4C - DEG-upset plot (all cell types)



```


<!-- Panel 4: CD14 monocytes-immunomodulation: imbalance score, Volcano plot of DEGs, pathway analysis (GSEA KEGG, BP), Cell Chat, TF analysis -->

```{r}
#  P4A - Imbalance score

imb_df <- read_rds("RData/2024-12-09_imbalance_score.rds")

P4A <- ggplot(imb_df, aes(x = umapharmony_1, y = umapharmony_2, col = scores)) +
  geom_point(size = 2, alpha = 0.8) +
  scale_color_gradientn(colours = palette7) +
  labs(title = NULL, x = "UMAP1", y = "UMAP2") +
  custom_theme() +
  empty_axis()

# P4B - Volcano plot of DEGs

DGE_PBMC <- read_rds("RData/2024-09-26_DGE_sc_res_1.rds")

avg.cd14.mono <- read_rds("RData/avg.cd14.mono.rds")

DGE_PBMC$`CD14 Mono` |> 
    mutate(
        Expression = case_when(
            avg_log2FC >= 1 & p_val_adj <= 0.01 ~ "Upregulated",
            avg_log2FC <= -1 & p_val_adj <= 0.01 ~ "Downregulated",
            TRUE ~ "Not significant")) |>
    merge(avg.cd14.mono, by.x = "gene", by.y = "gene") -> CD14_plot_data


P4B <- CD14_plot_data |> 
  ggplot(aes(Control, FRDA)) + 
  geom_point(aes(color = Expression)) + 
  ggtitle("CD14 Mono") + 
  ggrepel::geom_text_repel(data = head(CD14_plot_data |> 
                                         filter(abs(avg_log2FC) > 2 & p_val_adj < 0.01 & !is.na(description)) |>
                                         arrange(p_val_adj, desc(abs(avg_log2FC))), 20), 
                           aes(label = gene), 
                           max.overlaps = 20, 
                           force = 10) +
  scale_color_manual(values = c("#3288BD", "grey", "#D53E4F")) +
  custom_theme()

# P4C - pathway analysis (GSEA KEGG, BP)

files <- c("RData/gsea/2024-09-26_GSEA_REACTOME.xlsx", "RData/gsea/2024-09-26_GSEA_BP.xlsx")

GSEA_CD14 <- lapply(files, function(file){
  openxlsx::read.xlsx(file, "CD14 Mono")
})

names(GSEA_CD14) <- c("REACTOME", "BP")

pathway_list <- c("GOBP_POSITIVE_REGULATION_OF_HEMOPOIESIS", "GOBP_POSITIVE_REGULATION_OF_T_CELL_MEDIATED_IMMUNITY", "GOBP_POSITIVE_REGULATION_OF_LYMPHOCYTE_DIFFERENTIATION", "GOBP_NIK_NF_KAPPAB_SIGNALING", "GOBP_CELLULAR_RESPONSE_TO_MOLECULE_OF_BACTERIAL_ORIGIN", "GOBP_POSITIVE_REGULATION_OF_ADAPTIVE_IMMUNE_RESPONSE", "GOBP_INFLAMMATORY_RESPONSE", "GOBP_CYTOKINE_PRODUCTION", "GOBP_MAPK_CASCADE", "GOBP_CELLULAR_EXTRAVASATION", "GOBP_LEUKOCYTE_TETHERING_OR_ROLLING", "GOBP_REGULATION_OF_MONOCYTE_CHEMOTAXIS", "REACTOME_SIGNALING_BY_INTERLEUKINS", "REACTOME_INNATE_IMMUNE_SYSTEM", "REACTOME_INTERLEUKIN_4_AND_INTERLEUKIN_13_SIGNALING", "REACTOME_NEUTROPHIL_DEGRANULATION", "REACTOME_INTERLEUKIN_10_SIGNALING", "REACTOME_CYTOKINE_SIGNALING_IN_IMMUNE_SYSTEM")

do.call("rbind", GSEA_CD14) |> 
  as_tibble() |>  
  dplyr::select(c(1,5,6,7,8,9)) |>
  dplyr::mutate(Enrichment = ifelse(NES > 0, "Enriched", "Depleted")) |> 
  dplyr::arrange(desc(NES)) |> 
  dplyr::filter(ID %in% pathway_list) |> 
  dplyr::arrange(NES) |> 
  dplyr::mutate(
    ID = paste0(
      str_split_fixed(ID, pattern = "_", n = 2)[,1], ": ", 
      stringr::str_to_sentence(str_split_fixed(ID, pattern = "_", n = 2)[,2]) |> 
        gsub(ID, pattern = "_", replacement = " ")
      ),
    ID = factor(ID, levels = ID)
    ) |> 
  ggplot(aes(x = NES, y = ID, fill = Enrichment)) + 
  geom_bar(stat = "identity", alpha = 0.8) + 
  scale_x_continuous(position="bottom") +
  scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 50)) +
  scale_fill_manual(values = c("#D53E4F", "#3288BD")) +
  custom_theme()

P4C <- do.call("rbind", GSEA_CD14) |> 
  as_tibble() |>  
  dplyr::select(c(1,5,6,7,8,9)) |>
  dplyr::mutate(Enrichment = ifelse(NES > 0, "Enriched", "Depleted"),
                order = NES, .by = ID,
                top = c("top")) |> 
  dplyr::filter(ID %in% pathway_list) |> 
  dplyr::mutate(
    ID = paste0(
    str_split_fixed(ID, pattern = "_", n = 2)[,1], ": ", 
    stringr::str_to_sentence(str_split_fixed(ID, pattern = "_", n = 2)[,2]) |> 
      gsub(ID, pattern = "_", replacement = " "))) |> 
  ggplot(aes(x = top, y = reorder(ID, order))) + 
  geom_point(aes(color = Enrichment, size = abs(NES))) +
  scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 50)) +
  scale_color_manual(values = c("#3288BD", "#D53E4F")) +
  custom_theme()

# Cell Chat

# average enrichment of TF in Condition for each cell type

df <- t(as.matrix(seu_PBMC@assays$tfsulm@data)) |> 
  as.data.frame() |> 
  dplyr::mutate(cluster = seu_PBMC$cell_type,
                condition = seu_PBMC$Condition)|> 
  tidyr::pivot_longer(cols = c(-cluster, -condition), 
                      names_to = "source", 
                      values_to = "score") |> 
  dplyr::group_by(cluster, source, condition) |> 
  dplyr::summarise(mean = mean(score))

tfs <- df |> 
  dplyr::group_by(source, cluster) |> 
  dplyr::summarise(std = stats::sd(mean)) |> 
  dplyr::arrange(-abs(std)) |> 
  head(25) |> 
  dplyr::pull(source)

df |> 
  dplyr::filter(source %in% tfs & cluster == "CD14 Mono") |> 
  tidyr::pivot_wider(id_cols = c('condition'), 
                     names_from = 'source',
                     values_from = 'mean') |>
  tibble::column_to_rownames('condition') |> 
  as.matrix() -> top_acts_mat

colors <- rev(RColorBrewer::brewer.pal(n = 11, name = "RdBu"))
colors.use <- grDevices::colorRampPalette(colors = colors)(100)

my_breaks <- c(seq(-2, 0, length.out = ceiling(100 / 2) + 1),
               seq(0.05, 2, length.out = floor(100 / 2)))

pheatmap::pheatmap(mat = top_acts_mat,
                   color = colors.use,
                   border_color = "white",
                   breaks = my_breaks,
                   cellwidth = 15,
                   cellheight = 15,
                   treeheight_row = 20,
                   treeheight_col = 20)

apply(seu_PBMC[['tfsulm']]@data[tfs, ], 1, FUN=function(x)sum(is.na(x)))


# TRRUST analysis
tf_trrust <- read_csv("../data/TRRUST_CD14.csv")

P4D <- tf_trrust |> 
    mutate(order = desc(qvalue), .by = TF) |>
    head(20) |> 
    ggplot(aes(x = -log10(qvalue), y = reorder(TF, order))) +
    geom_bar(aes(fill = genes), stat = "identity") +
    xlab("-log10(p-adjust)") +
    ylab("Top 20 TF") +
    scale_fill_gradientn(colours = c('#FEE08B', '#D53E4F'), na.value = "grey") +
    custom_theme()

```


<!-- Panel 5: IL-10 producing monocytes: Il-10 levels in FA vs HC, IL-10 pathway genes (Reactome) heatmap, IL-10 producing cells proportion -->

```{r}
# Il-10 levels in FA vs HC (Module score)

seu_PBMC@meta.data |> 
    select(orig.ident, Condition, cell_type, 30) |>
    dplyr::filter(cell_type == "CD14 Mono") |> 
    pivot_longer(cols = c(-orig.ident, -Condition, -cell_type ), 
                 names_to = "source", 
                 values_to = "score") |> 
    ggplot(aes(Condition, score)) +
    geom_boxplot(width = 0.5, outlier.colour = "grey") + 
    custom_theme() +
    ggpubr::stat_compare_means(aes(label = paste0("p = ", after_stat(p.format))))

# IL-10 pathway genes (Reactome) heatmap

gene_sets <- msigdbr::msigdbr(species = "Homo sapiens")
gene_sets <- gene_sets[gene_sets$gene_symbol %in% rownames(seu_PBMC@assays$RNA@features@.Data),]
il10_glist <- gene_sets[gene_sets$gs_name == "REACTOME_INTERLEUKIN_10_SIGNALING", ]$gene_symbol |> unique()

t(as.matrix(seu_PBMC@assays$RNA$data[il10_glist,])) |> 
    as.data.frame() |> 
    dplyr::mutate(cluster = seu_PBMC$cell_type,
                  condition = seu_PBMC$Condition)|> 
    tidyr::pivot_longer(cols = c(-cluster, -condition), 
                        names_to = "source", 
                        values_to = "score") |> 
    dplyr::group_by(cluster, source, condition) |> 
    dplyr::summarise(mean = mean(score)) |> 
    dplyr::filter(cluster == "CD14 Mono" & !is.na(condition)) |> 
    tidyr::pivot_wider(id_cols = c('condition'), 
                       names_from = 'source',
                       values_from = 'mean') |>
    tibble::column_to_rownames('condition') |>
    as.matrix() -> il10_mat

pheatmap::pheatmap(mat = il10_mat,
                   color = colors.use,
                   border_color = "white",
                   cellwidth = 15,
                   cellheight = 15,
                   treeheight_row = 20,
                   treeheight_col = 20)

DoHeatmap(subset(seu_PBMC, subset = cell_type == "CD14 Mono"), features = il10_glist, cells = 1:33000, group.by = "Condition")

# IL-10 producing cells proportion

seu_PBMC@meta.data |>
    mutate(il10 = FetchData(seu_PBMC, vars = "IL10")$IL10) |> 
    filter(cell_type == "CD14 Mono") |> 
    dplyr::select(orig.ident, Condition, il10) |> 
    group_by(orig.ident, Condition) |>
    summarise(prop = length(which(il10 > 0))/length(il10)) |> 
    ggplot(aes(Condition, prop)) +
    geom_boxplot() + 
  custom_theme() +
    ggpubr::stat_compare_means(aes(label = paste0("p = ", after_stat(p.format))))


```


<!-- Panel 6: Neutrophils-IFN signaling: Metascape results, IFN pathway gene heatmap/scores, Neutrophil degranulation pathway genes heatmap/ pathway scores, TF-STAT1 signaling, PRR pathway score -->


```{r}
# Metascape results


# IFN pathway gene heatmap/scores

seu_WB@meta.data |> 
    select(orig.ident, Condition, cell_type, IFN1) |>
    filter(cell_type == "Neutrophil") |> 
    ggplot(aes(Condition, IFN1)) +
    geom_boxplot() + 
    stat_compare_means(aes(label = paste0("p = ", after_stat(p.format))))

# Neutrophil degranulation pathway genes heatmap/ pathway scores

seu_WB@meta.data |> 
    select(orig.ident, Condition, cell_type, NEUD) |>
    filter(cell_type == "Neutrophil") |> 
    ggplot(aes(Condition, NEUD)) +
    geom_boxplot() + 
    stat_compare_means(aes(label = paste0("p = ", after_stat(p.format))))

# TF-STAT1 signaling

t(as.matrix(seu_WB@assays$tfsulm@data)) |> 
  as.data.frame() |> 
  dplyr::mutate(cluster = Seurat::Idents(seu_WB),
                Condition = seu_WB@meta.data$Condition) |> 
  tidyr::pivot_longer(cols = c(-cluster, -Condition), 
                      names_to = "source", 
                      values_to = "score") |> 
  filter(source == "STAT1" & cluster == c("Neutrophil")) |> 
  ggplot(aes(Condition, score)) +
  # stat_dots(aes(fill = cluster), side = "left", justification = 1.05) +
  ggdist::stat_halfeye(aes(fill = cluster), adjust = .5, width = .7, justification = -.2, .width = 0, point_colour = NA) +
  geom_boxplot(aes(fill = cluster), width = 0.1, outlier.colour = "grey") + 
  facet_grid(~cluster) +
  theme_ggdist(base_size=18, base_family="Helvetica") +
  theme(text = element_text(size=18),
        axis.text.x = element_text(angle=0, hjust=.5, vjust = 0.5, color = "black"),
        axis.text.y = element_text(color = "black"),
        plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5),
        legend.position="none") +
  scale_fill_met_d(palette_name = "Egypt") +
  ggpubr::stat_compare_means(aes(label = paste0("p = ", after_stat(p.format))))


# PRR pathway score

seu_WB@meta.data |> 
    select(orig.ident, Condition, cell_type, RIG1) |>
    filter(cell_type == "Neutrophil") |> 
    ggplot(aes(Condition, RIG1)) +
    geom_boxplot() + 
    stat_compare_means(aes(label = paste0("p = ", after_stat(p.format))))

t(as.matrix(seu_WB@assays$module_score@data)) |> 
    as.data.frame() |> 
    dplyr::mutate(cluster = Seurat::Idents(seu_WB),
                  Condition = seu_WB@meta.data$Condition,
                  ) |> 
    tidyr::pivot_longer(cols = c(-cluster, -Condition), 
                        names_to = "source", 
                        values_to = "score") |> 
    filter(cluster == c("Neutrophil")) |> 
    ggplot(aes(Condition, score)) +
    ggdist::stat_halfeye(aes(fill = Condition), adjust = .5, width = .7, justification = -.2, .width = 0, point_colour = NA) +
    geom_boxplot(aes(fill = Condition), width = 0.1, outlier.colour = "grey") + 
    facet_grid(~source) +
    custom_theme() +
    scale_fill_manual(values = c("#D53E4F", "#3288BD")) +
    ggpubr::stat_compare_means(aes(label = paste0("p = ", after_stat(p.format))))

```


<!-- Panel 7: Monocyte IL-10- Neutrophil IFN axis associated with cardiomyopathy: WGCNA (bulk)- cardiac hypertrophy/ IL-10 signaling genes; CS-score, Il-10 levels in CAD vs NCAD, NLR ratio in CAD vs NCAD, Neutrophil genes- KLF2- cardiomyopathy -->

```{r}
# CS-score

files <- c("RData/CSCORE/2024-11-29_coex_CAD_C.xlsx", "RData/CSCORE/2024-11-29_coex_CAD_NCAD.xlsx")

CS_CD14 <- lapply(files, function(file){
  sheets <- openxlsx::getSheetNames(file)
  lapply(setNames(sheets,sheets), function(sheet){
    openxlsx::read.xlsx(file, sheet)
    })
  })

names(CS_CD14) <- c("CAD_C", "CAD_NCAD")

M3 <- c("inflammatory response", "response to molecule of bacterial origin", "response to cytokine", "response to lipopolysaccharide", "positive regulation of immune system process", "interleukin-1 production", "positive regulation of cytokine production", "cell migration", "cytokine production", "regulation of response to biotic stimulus", "cell activation", "regulation of cell motility", "defense response to symbiont", "cytokine-mediated signaling pathway", "positive regulation of cell population proliferation", "activation of immune response", "interleukin-6 production", "T-helper 1 type immune response", "innate immune response", "immune response-activating signaling pathway", "central nervous system development", "cell chemotaxis", "positive regulation of type II interferon production", "G protein-coupled receptor signaling pathway", "T cell activation", "cell-cell adhesion", "type II interferon production", "lipopolysaccharide-mediated signaling pathway", "interleukin-12 production", "MAPK cascade", "negative regulation of non-canonical NF-kappaB signal transduction", "cell-cell junction organization", "monocyte chemotaxis", "macrophage chemotaxis", "granulocyte chemotaxis")

M9 <- c("granulocyte chemotaxis", "granulocyte migration", "leukocyte chemotaxis", "neutrophil chemotaxis", "neutrophil migration", "leukocyte migration", "innate immune response", "defense response to symbiont", "secretory granule")

M15 <- c("defense response to virus", "response to virus", "defense response to other organism", "interferon-mediated signaling pathway", "response to type I interferon", "innate immune response", "response to cytokine", "regulation of type I interferon production", "type I interferon production", "type I interferon-mediated signaling pathway", "cellular response to type I interferon")

p1 <- CS_CD14$CAD_NCAD$M3 |> 
  dplyr::select(c(1:10,13)) |> 
  filter(Description %in% M3) |> 
  mutate(GeneRatio = eval(parse(text = GeneRatio)),
         ID = paste0(ONTOLOGY, ":", stringr::str_to_sentence(Description)),
         order = GeneRatio, .by = ID) |> 
  ggplot(aes(x = GeneRatio, y = reorder(ID, order),color = p.adjust, size = Count)) +
  geom_point() + 
  labs(x = "Gene Ratio", y = "Gene Ontology", title = "Module 3") + 
  scale_color_gradientn(colours = c('#D53E4F', '#FFFFFF'), limit = c(min(CS_CD14$CAD_NCAD$M3$p.adjust), max(CS_CD14$CAD_NCAD$M3$p.adjust)), na.value = "grey") +
  scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 50)) +
  custom_theme()

p2 <- CS_CD14$CAD_NCAD$M9 |> 
  dplyr::select(c(1:10,13)) |> 
  filter(Description %in% M9) |> 
  mutate(GeneRatio = eval(parse(text = GeneRatio)),
         ID = paste0(ONTOLOGY, ":", stringr::str_to_sentence(Description)),
         order = GeneRatio, .by = ID) |> 
  ggplot(aes(x = GeneRatio, y = reorder(ID, order),color = p.adjust, size = Count)) +
  geom_point() + 
  labs(x = "Gene Ratio", y = NULL, title = "Module 9") + 
  scale_color_gradientn(colours = c('#D53E4F', '#FFFFFF'), limit = c(min(CS_CD14$CAD_NCAD$M9$p.adjust), max(CS_CD14$CAD_NCAD$M9$p.adjust)), na.value = "grey") +
  scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 50)) +
  custom_theme()

p3 <- CS_CD14$CAD_NCAD$M15 |> 
    dplyr::select(c(1:10,13)) |> 
    filter(Description %in% M15) |> 
    mutate(GeneRatio = eval(parse(text = GeneRatio)),
           ID = paste0(ONTOLOGY, ":", stringr::str_to_sentence(Description)),
           order = GeneRatio, .by = ID) |> 
    ggplot(aes(x = GeneRatio, y = reorder(ID, order), color = p.adjust, size = Count)) +
    geom_point() + 
    labs(x = "Gene Ratio", y = NULL, title = "Module 15") + 
    scale_color_gradientn(colours = c('#D53E4F', '#FFFFFF'), limit = c(min(CS_CD14$CAD_NCAD$M15$p.adjust), max(CS_CD14$CAD_NCAD$M15$p.adjust)), na.value = "grey") +
    scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 50)) +
    custom_theme()

wrap_plots(p1,p2,p3)

```





















