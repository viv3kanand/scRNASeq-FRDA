---
title: "1. Preprocessing - scRNA-Seq - FRDA (PBMC)"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
  pdf:
    toc: true
    toc-depth: 2
    number-sections: true
editor: source
author: viv3kanand
date: "`r format(Sys.time(), '%d %B, %Y')`"
---

## Package dependencies

```{r}
#| label: packages
#| echo: true
#| eval: false

# options(renv.config.pak.enabled = TRUE)
# renv::install("Matrix")
# renv::install("Seurat")
# 
# setRepositories(ind = 1:3, addURLs = c('https://satijalab.r-universe.dev', 'https://bnprks.r-universe.dev/'))
# renv::install("BPCells")
# renv::install("presto")
# renv::install("glmGamPoi")

# renv::install("satijalab/seurat-data")
# renv::install("mojaveazure/seurat-disk")
# renv::install("satijalab/azimuth")
# renv::install("satijalab/seurat-wrappers")


# renv::install("future")

# renv::install("Bioc::multtest") #metap dependency
# renv::install("metap")

# renv::install("tidyverse")
# renv::install("gt")
```

### Load required libraries

```{r}
#| label: load packages
#| echo: true
#| eval: true
#| message: false
#| warning: false

require(Seurat)
require(Azimuth)
require(data.table)
require(future)

require(tidyverse)
require(gt)

```

### Option presets

```{r}
#| label: options
#| echo: false
#| eval: true
#| warning: false

options(Seurat.object.assay.calcn = TRUE)
plan("multicore", workers = 40)
options(future.globals.maxSize = 150000 * 1024^2)
setDTthreads(threads = 20)

```

## Data processing

### Load 10X matrices

```{r}
#| label: load 10x matrices
#| echo: true
#| eval: true

li_PBMC <- list.files("../data/PBMC/", pattern = "h5")

purrr::imap(setNames(li_PBMC, gsub(pattern = "_filtered_feature_bc_matrix.h5", 
                              replacement = "", li_PBMC)), 
            function(obj, name){
              Seurat::Read10X_h5(paste0("../data/PBMC/", obj)) |> 
                Seurat::CreateSeuratObject(min.cells = 3,
                                           project = name)
}) -> seurat_list

```

### Helper scripts

```{r}
#| label: source helper scripts
#| echo: true
#| eval: true

source("../scripts/helper_scripts.R")

```

### Filter and merge

```{r}
#| label: filter and merge
#| echo: true
#| eval: false

# Filter cells with empirical cut off
seurat_list %<>% map(filterCell)

# Merge datasets
seurat_obj <- reduce(seurat_list, merge) %>%
  AddMetaData(gsub("control.*", "Control", 
                   gsub("patient.*", "FRDA", 
                        .$orig.ident)),
              col.name = "Condition") %>%
  JoinLayers()  #https://github.com/satijalab/seurat/issues/7316

```

### Filtering summary

```{r}
#| label: filter summary
#| echo: true
#| eval: true

lapply(seurat_list, function(obj){
    emp <- emp_fun(obj)
    filt <- filt_fun(obj, emp)
    emp |> as.data.frame() |> 
        rownames_to_column("Sample") |> 
        mutate(nCount_RNA = round(nCount_RNA),
               nFeature_RNA = round(nFeature_RNA),
               nCells = nrow(obj@meta.data),
               nCells_filt = nrow(filt@meta.data)) |> 
        filter(Sample == 1)
}) |> bind_rows(.id = "Sample") |> 
    gt() |> 
    tab_header(title = "Sample filtering statistics")

```


### Normalization and find clusters

```{r}
#| label: normalization
#| echo: true
#| eval: false

DefaultAssay(seurat_obj) <- "RNA"

seurat_obj <- seurat_obj |> 
  NormalizeData() |> 
  FindVariableFeatures(selection.method = "vst") |> 
  ScaleData()

seurat_obj <- RunAzimuth(seurat_obj, reference = "pbmcref") # reference for later

seurat_obj[["RNA"]] <- split(seurat_obj[["RNA"]], f = seurat_obj$Condition) #split into condition

seurat_obj %<>% SCTransform(vars.to.regress = "percent.mt", verbose = TRUE) 

seurat_obj %<>% RunPCA()

seurat_obj %<>% FindNeighbors(dims = 1:30)

seurat_obj %<>% FindClusters(resolution = 0.1, cluster.name = "cluster.unintegrated")

seurat_obj %<>% RunUMAP(dims = 1:30, reduction = "pca", reduction.name = "umap.unintegrated")

```

### Perform integration

```{r}
#| label: integration
#| echo: true
#| eval: false

DefaultAssay(seurat_obj) <- "SCT"

seurat_obj <- seurat_obj |> 
  IntegrateLayers(assay = "SCT",
                  method = HarmonyIntegration, 
                  orig.reduction = "pca", 
                  new.reduction = "harmony", 
                  verbose = TRUE)

seurat_obj <- seurat_obj |> 
  FindNeighbors(reduction = "harmony", dims = 1:30) |> 
  FindClusters(resolution = seq(0.1,1,0.1)) |> 
  RunUMAP(reduction = "harmony", dims = 1:30, reduction.name = "umap.harmony")

```

### Subset low quality clusters

```{r}
#| label: subset
#| echo: true
#| eval: false

# cluster 27 - CD14 and B cell markers
# cluster 19 - platelet and T cell markers

seurat_obj <- subset(seurat_obj, idents = c(19, 27), invert = TRUE)

```

```{r}
#| label: preload rds
#| echo: false
#| eval: true

seurat_obj <- read_rds("../data/2024-10-07_sce_PBMC.rds")

```

### Dimplot - SCT_snn_res.1

```{r}
#| label: scatter plot - SCT_snn_res.1
#| echo: true
#| eval: false
#| fig-width: 10
#| fig-height: 7
#| fig-align: center

DimPlot(seurat_obj, 
        reduction = "umap.harmony", 
        group.by = c("SCT_snn_res.1"), 
        pt.size = 1, 
        label = TRUE) & 
  NoLegend()

```

### Final annotation

```{r}
#| label: annotation
#| echo: true
#| eval: false

Idents(merged_data) <- "SCT_snn_res.1"
merged_data[["cell_type"]] <- Idents(merged_data) # create cell_type metadata
Idents(merged_data) <- "cell_type"

cluster.ids <- c("CD14 Mono", "NK|CD56 Bright", "CD4 TCM|TEM|Th17|Th2", "CD8 TEM|TCM|TEFF", "CD14 Mono", "CD4 TCM|TEM|Th17|Th2", "CD4 Naive", "CD4 TCM|TEM|Th17|Th2", "B Naive", "CD4 Naive", "CD8 Naive", "Platelet", "CD14 Mono", "CD4 Naive", "CD8 TEM|TCM|TEFF", "CD16 Mono", "B Naive", "gDT", "B Memory", "CD8 Naive", "CD4 Naive", "cDC", "PTGDS high NK", "MAIT", "pDC", "CD14 Mono", "Cycling T cells", "B Naive", "LEF1 high gDT", "Plasmablast", "B Naive", "HSPC")

names(cluster.ids) <- levels(merged_data)

merged_data <- RenameIdents(merged_data, cluster.ids)

merged_data$cell_type <- Idents(merged_data) # change metadata column with idents

```

### Dimplot - Cell types

```{r}
#| label: scatter plot - cell types
#| echo: true
#| eval: false
#| fig-width: 10
#| fig-height: 7
#| fig-align: center

DimPlot(seurat_obj, 
        reduction = "umap.harmony", 
        group.by = c("cell_type"), 
        pt.size = 1, 
        label = TRUE) & 
  NoLegend()

```

### Write rds

```{r}
#| label: write files
#| echo: true
#| eval: false

write_rds(seurat_obj, file = paste0("RData/", Sys.Date(), "_seurat_PBMC.rds"))

```






















