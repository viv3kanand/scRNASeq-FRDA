---
title: "Survival Analysis"
author: "viv3kanand"
format: html
editor: source
---

### Install packages

```{r}
#| label: install
#| echo: true
#| eval: false
options(renv.config.pak.enabled = TRUE)

renv::install("pharmaverse/ggsurvfit")
renv::install("survival")

```

### Load libraries

```{r}
#| label: packages
#| echo: true
#| eval: true
#| message: false
#| warning: false

require(DESeq2)
require(tidyverse)
require(survival)
require(ggsurvfit)
```

### Load data

```{r}
#| label: load data
#| echo: false
#| eval: true

dds <- read_rds("RData/Bulk/2025-06-04_dds.rds")
```

### Transform and filter data

```{r}
counts <- counts(dds, normalized = TRUE)

# filter genes whose expression is zero in more than half the samples
filter_fun <- function(x){
  x <- t(apply(as.matrix(x),1,as.numeric))
  r <- as.numeric(apply(x,1,function(i) sum(i == 0)))
  remove <- which(r > dim(x)[2]*0.5)
  return(remove)
}
remove <- filter_fun(counts)
counts <- counts[-remove,]
```

### Batch correction

```{r}
log_counts <- log2(counts + 1)

mm <- model.matrix(~Condition, colData(dds))
log_counts <- limma::removeBatchEffect(log_counts, batch=colData(dds)$Batch, design=mm)
```

### zscore calculation

```{r}
# Extract case expression matrix
case_counts <- log_counts[, 1:52]

# Calculate mean and SD across control samples for each gene
mean_n <- rowMeans(log_counts[, 53:64])
sd_n <- apply(log_counts[, 53:64], 1, sd)

# zscore scaling (broadcasting using sweep)
z_counts <- sweep(case_counts, 1, mean_n, FUN = "-")
z_counts <- sweep(z_counts, 1, sd_n, FUN = "/")
```
































